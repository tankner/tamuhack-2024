[{"/home/tankner/tamuhack-2024/tamuhack-2024/client/src/index.js":"1","/home/tankner/tamuhack-2024/tamuhack-2024/client/src/App.js":"2","/home/tankner/tamuhack-2024/tamuhack-2024/client/src/components/SearchPage.js":"3","/home/tankner/tamuhack-2024/tamuhack-2024/client/src/components/SettingsButton.js":"4"},{"size":197,"mtime":1706391412151,"results":"5","hashOfConfig":"6"},{"size":384,"mtime":1706418312568,"results":"7","hashOfConfig":"6"},{"size":3942,"mtime":1706417657268,"results":"8","hashOfConfig":"6"},{"size":1976,"mtime":1706413335770,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1sv0dfv",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"13"},"/home/tankner/tamuhack-2024/tamuhack-2024/client/src/index.js",[],[],[],"/home/tankner/tamuhack-2024/tamuhack-2024/client/src/App.js",[],[],"/home/tankner/tamuhack-2024/tamuhack-2024/client/src/components/SearchPage.js",[],[],[],"/home/tankner/tamuhack-2024/tamuhack-2024/client/src/components/SettingsButton.js",["25"],[],"import React, { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport Menu from '@mui/material/Menu';\nimport MenuItem from '@mui/material/MenuItem';\nimport Slider from '@mui/material/Slider';\n\nfunction SettingsButton({ searchEngine, onSearchEngineChange }) {\n    const [anchorEl, setAnchorEl] = React.useState(null);\n  \n    const handleClick = (event) => {\n      setAnchorEl(event.currentTarget);\n    };\n  \n    const handleClose = () => {\n      setAnchorEl(null);\n    };\n  \n    const handleSliderChange = (event, newValue) => {\n      // Convert slider value to corresponding search engine\n      const searchEngines = ['Google', 'Bing', 'Yahoo'];\n      const newSearchEngine = searchEngines[newValue];\n      \n      // Update the parent component state using onSearchEngineChange\n      onSearchEngineChange(newSearchEngine);\n    };\n  \n    return (\n      <div className=\"settings-button\">\n        <Button\n          onClick={handleClick}\n          aria-controls=\"dropdown-menu\"\n          aria-haspopup=\"true\"\n        >\n          Change Engine\n        </Button>\n        <Menu\n          id=\"dropdown-menu\"\n          anchorEl={anchorEl}\n          keepMounted\n          open={Boolean(anchorEl)}\n          onClose={handleClose}\n        >\n          {/* Use a Slider for selecting search engine */}\n          <MenuItem>\n            <div>\n              <p>   Select Search Engine   </p>\n              <Slider\n                value={['Google', 'Bing', 'Yahoo'].indexOf(searchEngine)}\n                onChange={handleSliderChange}\n                valueLabelDisplay=\"auto\"\n                step={1}\n                marks={[\n                  { value: 0, label: 'Google' },\n                  { value: 1, label: 'Bing' },\n                  { value: 2, label: 'Yahoo' },\n                ]}\n                min={0}\n                max={2}\n              />\n            </div>\n          </MenuItem>\n        </Menu>\n      </div>\n    );\n  }\n  \n  export default SettingsButton;\n  ",{"ruleId":"26","severity":1,"message":"27","line":1,"column":17,"nodeType":"28","messageId":"29","endLine":1,"endColumn":25},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar"]